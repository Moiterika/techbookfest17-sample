---
// importは---で囲われたコードフェンス内で行います
import { css } from "../../styled-system/css";
import "../index.css";

const buttonStyle = css({
    padding: "8px 16px",
    fontSize: "16px",
    fontWeight: "bold",
    color: "white",
    backgroundColor: "indigo.500",
    border: "none",
    borderRadius: "4px",
    cursor: "pointer",
    transition: "background-color 0.3s ease",

    "&:hover": {
        backgroundColor: "indigo.700",
    },
    "&:active": {
        backgroundColor: "indigo.500",
    },
    "&:disabled": {
        backgroundColor: "indigo.100",
        cursor: "not-allowed",
        pointerEvents: "none",
    },
});
---

<html lang="jp">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Astro</title>
        <!-- 方法1. CDNを使う minified version -->
        <!-- <script
            src="https://unpkg.com/htmx.org@2.0.3"
            integrity="sha384-0895/pl2MU10Hqc6jd4RvrthNlDiE9U1tWmX7WRESftEDRosgxNsQG/Ze9YMRzHq"
            crossorigin="anonymous"></script> -->
        <!-- 方法2. CDNを使う unminified version -->
        <!-- <script
            src="https://unpkg.com/htmx.org@2.0.3/dist/htmx.js"
            integrity="sha384-BBDmZzVt6vjz5YbQqZPtFZW82o8QotoM7RUp5xOxV3nSJ8u2pSdtzFAbGKzTlKtg"
            crossorigin="anonymous"></script> -->
        <!-- 方法3. ダウンロード版を使う minified version -->
        <script src="/htmx.min.js" is:inline></script>
        <!-- 方法4. ウンロード版を使う unminified version -->
        <!-- <script src="/htmx.js" is:inline></script> -->
        <script src="/response-targets.min.js" is:inline></script>
    </head>
    <body x-data="errorHandler">
        <h1>Astro</h1>
        <div hx-ext="response-targets">
            <form
                hx-post="api/sample"
                hx-target="#result"
                hx-swap="beforeend"
                hx-target-4*="#error-message"
            >
                <input
                    type="text"
                    name="my-name"
                    placeholder="名前を記入してください。"
                    required
                    class={css({
                        border: "1px solid #818cf8",
                        padding: "8px",
                        borderRadius: "4px",
                        _focus: {
                            borderColor: "#4338ca",
                            outline: "none",
                        },
                    })}
                />
                <button type="submit" class={buttonStyle}>追加</button>
            </form>
            <div id="result"></div>
            <div id="error-message" x-show="isError" style="color: red;"></div>
            <div x-show="hasErrorMessage">
                <!-- x-show="errorMessage"でも可 -->
                <p x-text="errorMessage"></p>
            </div>
        </div>
        <script>
            import Alpine from "alpinejs";
            const errorHandler = () => ({
                errorMessage: "",
                isError: false,
                get hasErrorMessage(): boolean {
                    return this.errorMessage != "";
                },
                init() {
                    document.body.addEventListener(
                        "htmx:responseError",
                        (event) => {
                            const customEvent = event as CustomEvent;
                            if (
                                500 <= customEvent.detail.xhr.status &&
                                customEvent.detail.xhr.status < 600
                            ) {
                                // console.log(customEvent);
                                this.errorMessage = `サーバーエラーが発生しました。${customEvent.detail.xhr.responseText}`;
                            }
                        }
                    );
                    document.body.addEventListener(
                        "htmx:afterRequest",
                        (event) => {
                            const customEvent = event as CustomEvent;

                            // HTMXとresponse-targetsで捉えられない場合、customEvent.detail.successfulはfalseになる
                            // 200番台⇒true; HTMXで補足
                            // 400番台⇒true; hx-target-4*で補足
                            // 500番台⇒false
                            if (customEvent.detail.successful) {
                                this.errorMessage = "";
                            }
                            this.isError = customEvent.detail.xhr.status >= 400;
                        }
                    );
                },
            });

            // Alpine.jsの初期化時にバインディング処理を実行する
            document.addEventListener("alpine:init", () => {
                Alpine.data("errorHandler", errorHandler);
            });
        </script>
    </body>
</html>
